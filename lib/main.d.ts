/**
 * Fluent-ytdlp - Copyright Â© 2023 YBD Project - MIT License
 */
/// <reference types="node" />
/// <reference types="node" />
import { ChildProcessWithoutNullStreams, ChildProcess, ExecFileException, ExecException } from 'node:child_process';
type YTDlpOptionsData = {
    [key: string]: string | number | boolean | RegExp | Date | object;
};
type SpawnOptions = {
    cwd: string;
    env: any;
    argv0: string;
    stdio: any;
    detached: boolean;
    uid: number;
    gid: number;
    serialization: any;
    shell: boolean | string;
    windowsVerbatimArguments: boolean;
    windowsHide: boolean;
    signal: AbortSignal;
    timeout: number;
    killSignal: any;
};
type RunOptions = {
    force?: boolean;
    spawnOptions?: SpawnOptions;
};
type scheduleRunOptions = {
    force?: boolean;
    spawnOptions?: SpawnOptions;
    schedule: string;
};
type NoStreamRunOptions = {
    type: 'exec' | 'execFile';
    callback: (error: ExecFileException | ExecException | null, stdout: string, stderr: string) => void;
    force?: boolean;
};
declare class fluentYTDlp {
    private options;
    private wrongOption;
    private debug;
    constructor(url: string, debug?: boolean);
    run: (this: fluentYTDlp, runOptions?: RunOptions) => ChildProcessWithoutNullStreams;
    scheduleRun: (this: fluentYTDlp, runOptions?: scheduleRunOptions) => Promise<ChildProcessWithoutNullStreams>;
    noStreamRun: (this: fluentYTDlp, runOptions?: NoStreamRunOptions) => ChildProcess;
    resolution: (this: fluentYTDlp, resolution: string) => fluentYTDlp;
    width: (this: fluentYTDlp, _width: string | number) => fluentYTDlp;
    height: (this: fluentYTDlp, _height: string | number) => fluentYTDlp;
    filename: (this: fluentYTDlp, filename: string) => fluentYTDlp;
    extension: (this: fluentYTDlp, extension: string) => fluentYTDlp;
    url: (this: fluentYTDlp, url: string) => fluentYTDlp;
    otherOptions: (this: fluentYTDlp, otherOptions: YTDlpOptionsData) => fluentYTDlp;
    _ytdlpPath: () => string;
    _ffmpegPath: () => string;
    _ffprobePath: () => string;
    _binPath: () => string;
    help: (this: fluentYTDlp) => fluentYTDlp;
    version: (this: fluentYTDlp) => fluentYTDlp;
    update: (this: fluentYTDlp) => fluentYTDlp;
    noUpdate: (this: fluentYTDlp) => fluentYTDlp;
    updateTo: (this: fluentYTDlp, version: string) => fluentYTDlp;
    ignoreErrors: (this: fluentYTDlp) => fluentYTDlp;
    abortOnError: (this: fluentYTDlp) => fluentYTDlp;
    noIgnoreErrors: (this: fluentYTDlp) => fluentYTDlp;
    noAbortOnError: (this: fluentYTDlp) => fluentYTDlp;
    dumpUserAgent: (this: fluentYTDlp) => fluentYTDlp;
    listExtractors: (this: fluentYTDlp) => fluentYTDlp;
    extractorDescriptions: (this: fluentYTDlp) => fluentYTDlp;
    useExtractors: (this: fluentYTDlp, extractor: string) => fluentYTDlp;
    defaultSearch: (this: fluentYTDlp, method: string) => fluentYTDlp;
    configLocation: (this: fluentYTDlp, path: string) => fluentYTDlp;
    ignoreConfig: (this: fluentYTDlp) => fluentYTDlp;
    noConfig: (this: fluentYTDlp) => fluentYTDlp;
    noConfigLocations: (this: fluentYTDlp) => fluentYTDlp;
    flatPlaylist: (this: fluentYTDlp) => fluentYTDlp;
    noFlatPlaylist: (this: fluentYTDlp) => fluentYTDlp;
    liveFromStart: (this: fluentYTDlp) => fluentYTDlp;
    noLiveFromStart: (this: fluentYTDlp) => fluentYTDlp;
    waitForVideo: (this: fluentYTDlp, seconds: string | number) => fluentYTDlp;
    noWaitForVideo: (this: fluentYTDlp) => fluentYTDlp;
    markWatched: (this: fluentYTDlp) => fluentYTDlp;
    noMarkWatched: (this: fluentYTDlp) => fluentYTDlp;
    noColors: (this: fluentYTDlp) => fluentYTDlp;
    compatOptions: (this: fluentYTDlp, opts: string) => fluentYTDlp;
    proxy: (this: fluentYTDlp, proxyUrl: string) => fluentYTDlp;
    socketTimeout: (this: fluentYTDlp, seconds: string | number) => fluentYTDlp;
    sourceAddress: (this: fluentYTDlp, address: string) => fluentYTDlp;
    forceIpv4: (this: fluentYTDlp) => fluentYTDlp;
    forceIpv6: (this: fluentYTDlp) => fluentYTDlp;
    enableFileUrls: (this: fluentYTDlp) => fluentYTDlp;
    geoVerificationProxy: (this: fluentYTDlp, proxyUrl: string) => fluentYTDlp;
    geoBypass: (this: fluentYTDlp) => fluentYTDlp;
    noGeoBypass: (this: fluentYTDlp) => fluentYTDlp;
    geoBypassCountry: (this: fluentYTDlp, countryCode: string) => fluentYTDlp;
    geoBypassIpBlock: (this: fluentYTDlp, ipBlock: string) => fluentYTDlp;
    playlistItems: (this: fluentYTDlp, index: string) => fluentYTDlp;
    maxDownloads: (this: fluentYTDlp, max: string | number) => fluentYTDlp;
    minFileSize: (this: fluentYTDlp, size: string) => fluentYTDlp;
    maxFileSize: (this: fluentYTDlp, size: string) => fluentYTDlp;
    date: (this: fluentYTDlp, _date: string | Date) => fluentYTDlp;
    dateBefore: (this: fluentYTDlp, _date: string | Date) => fluentYTDlp;
    dateAfter: (this: fluentYTDlp, _date: string | Date) => fluentYTDlp;
    matchFilters: (this: fluentYTDlp, filter: string) => fluentYTDlp;
    noMatchFilter: (this: fluentYTDlp) => fluentYTDlp;
    breakMatchFilters: (this: fluentYTDlp, filter: string) => fluentYTDlp;
    noBreakMatchFilters: (this: fluentYTDlp) => fluentYTDlp;
    noPlaylist: (this: fluentYTDlp) => fluentYTDlp;
    yesPlaylist: (this: fluentYTDlp) => fluentYTDlp;
    ageLimit: (this: fluentYTDlp, years: string | number) => fluentYTDlp;
    downloadArchive: (this: fluentYTDlp, file: string) => fluentYTDlp;
    noDownloadArchive: (this: fluentYTDlp) => fluentYTDlp;
    breakOnExisting: (this: fluentYTDlp) => fluentYTDlp;
    breakPerInput: (this: fluentYTDlp) => fluentYTDlp;
    noBreakPerInput: (this: fluentYTDlp) => fluentYTDlp;
    skipPlaylistAfterErrors: (this: fluentYTDlp, limit: string | number) => fluentYTDlp;
    concurrentFragments: (this: fluentYTDlp, number: string | number) => fluentYTDlp;
    limitRate: (this: fluentYTDlp, rate: string) => fluentYTDlp;
    throttledRate: (this: fluentYTDlp, rate: string) => fluentYTDlp;
    retries: (this: fluentYTDlp, retries: string | number) => fluentYTDlp;
    fileAccessRetries: (this: fluentYTDlp, retries: string | number) => fluentYTDlp;
    fragmentRetries: (this: fluentYTDlp, retries: string | number) => fluentYTDlp;
    retrySleep: (this: fluentYTDlp, seconds: string | number) => fluentYTDlp;
    noAbortOnUnavailableFragments: (this: fluentYTDlp) => fluentYTDlp;
    skipUnavailableFragments: (this: fluentYTDlp) => fluentYTDlp;
    abortOnUnavailableFragments: (this: fluentYTDlp) => fluentYTDlp;
    noSkipUnavailableFragments: (this: fluentYTDlp) => fluentYTDlp;
    keepFragments: (this: fluentYTDlp) => fluentYTDlp;
    noKeepFragments: (this: fluentYTDlp) => fluentYTDlp;
    bufferSize: (this: fluentYTDlp, size: string) => fluentYTDlp;
    resizeBuffer: (this: fluentYTDlp) => fluentYTDlp;
    noResizeBuffer: (this: fluentYTDlp) => fluentYTDlp;
    httpChunkSize: (this: fluentYTDlp, size: string) => fluentYTDlp;
    playlistRandom: (this: fluentYTDlp) => fluentYTDlp;
    lazyPlaylist: (this: fluentYTDlp) => fluentYTDlp;
    noLazyPlaylist: (this: fluentYTDlp) => fluentYTDlp;
    xattrSetFileSize: (this: fluentYTDlp) => fluentYTDlp;
    hlsUseMpegts: (this: fluentYTDlp) => fluentYTDlp;
    noHlsUseMpegts: (this: fluentYTDlp) => fluentYTDlp;
    downloadSections: (this: fluentYTDlp, regex: string) => fluentYTDlp;
    downloader: (this: fluentYTDlp, downloader: string) => fluentYTDlp;
    externalDownloader: (this: fluentYTDlp, downloader: string) => fluentYTDlp;
    downloaderArgs: (this: fluentYTDlp, args: string) => fluentYTDlp;
    externalDownloaderArgs: (this: fluentYTDlp, args: string) => fluentYTDlp;
    batchFile: (this: fluentYTDlp, file: string) => fluentYTDlp;
    noBatchFile: (this: fluentYTDlp) => fluentYTDlp;
    paths: (this: fluentYTDlp, path: string) => fluentYTDlp;
    output: (this: fluentYTDlp, template: string) => fluentYTDlp;
    outputNaPlaceholder: (this: fluentYTDlp, text: string) => fluentYTDlp;
    restrictFilenames: (this: fluentYTDlp) => fluentYTDlp;
    noRestrictFilenames: (this: fluentYTDlp) => fluentYTDlp;
    windowsFilenames: (this: fluentYTDlp) => fluentYTDlp;
    noWindowsFilenames: (this: fluentYTDlp) => fluentYTDlp;
    trimFilenames: (this: fluentYTDlp, length: string | number) => fluentYTDlp;
    noOverwrites: (this: fluentYTDlp) => fluentYTDlp;
    forceOverwrites: (this: fluentYTDlp) => fluentYTDlp;
    noForceOverwrites: (this: fluentYTDlp) => fluentYTDlp;
    continue: (this: fluentYTDlp) => fluentYTDlp;
    noContinue: (this: fluentYTDlp) => fluentYTDlp;
    part: (this: fluentYTDlp) => fluentYTDlp;
    noPart: (this: fluentYTDlp) => fluentYTDlp;
    mtime: (this: fluentYTDlp) => fluentYTDlp;
    noMtime: (this: fluentYTDlp) => fluentYTDlp;
    writeDescription: (this: fluentYTDlp) => fluentYTDlp;
    noWriteDescription: (this: fluentYTDlp) => fluentYTDlp;
    writeInfoJson: (this: fluentYTDlp) => fluentYTDlp;
    noWriteInfoJson: (this: fluentYTDlp) => fluentYTDlp;
    cleanInfoJson: (this: fluentYTDlp) => fluentYTDlp;
    noCleanInfoJson: (this: fluentYTDlp) => fluentYTDlp;
    writePlaylistMetafiles: (this: fluentYTDlp) => fluentYTDlp;
    noWritePlaylistMetafiles: (this: fluentYTDlp) => fluentYTDlp;
    writeComments: (this: fluentYTDlp) => fluentYTDlp;
    getComments: (this: fluentYTDlp) => fluentYTDlp;
    noWriteComments: (this: fluentYTDlp) => fluentYTDlp;
    noGetComments: (this: fluentYTDlp) => fluentYTDlp;
    loadInfoJson: (this: fluentYTDlp, file: string) => fluentYTDlp;
    cookies: (this: fluentYTDlp, file: string) => fluentYTDlp;
    noCookies: (this: fluentYTDlp) => fluentYTDlp;
    cookiesFromBrowser: (this: fluentYTDlp, browser: string) => fluentYTDlp;
    noCookiesFromBrowser: (this: fluentYTDlp) => fluentYTDlp;
    cacheDir: (this: fluentYTDlp, dir: string) => fluentYTDlp;
    noCacheDir: (this: fluentYTDlp) => fluentYTDlp;
    rmCacheDir: (this: fluentYTDlp) => fluentYTDlp;
    writeThumbnail: (this: fluentYTDlp) => fluentYTDlp;
    writeAllThumbnails: (this: fluentYTDlp) => fluentYTDlp;
    noWriteThumbnail: (this: fluentYTDlp) => fluentYTDlp;
    listThumbnails: (this: fluentYTDlp) => fluentYTDlp;
    writeLink: (this: fluentYTDlp) => fluentYTDlp;
    writeUrlLink: (this: fluentYTDlp) => fluentYTDlp;
    writeWeblocLink: (this: fluentYTDlp) => fluentYTDlp;
    writeDesktopLink: (this: fluentYTDlp) => fluentYTDlp;
    quiet: (this: fluentYTDlp) => fluentYTDlp;
    noWarnings: (this: fluentYTDlp) => fluentYTDlp;
    simulate: (this: fluentYTDlp) => fluentYTDlp;
    noSimulate: (this: fluentYTDlp) => fluentYTDlp;
    ignoreNoFormatsError: (this: fluentYTDlp) => fluentYTDlp;
    noIgnoreNoFormatsError: (this: fluentYTDlp) => fluentYTDlp;
    skipDownload: (this: fluentYTDlp) => fluentYTDlp;
    noDownload: (this: fluentYTDlp) => fluentYTDlp;
    print: (this: fluentYTDlp, template: string) => fluentYTDlp;
    printToFile: (this: fluentYTDlp, templateFile: string) => fluentYTDlp;
    dumpJson: (this: fluentYTDlp) => fluentYTDlp;
    dumpSingleJson: (this: fluentYTDlp) => fluentYTDlp;
    forceWriteArchive: (this: fluentYTDlp) => fluentYTDlp;
    forceDownloadArchive: (this: fluentYTDlp) => fluentYTDlp;
    newline: (this: fluentYTDlp) => fluentYTDlp;
    noProgress: (this: fluentYTDlp) => fluentYTDlp;
    progress: (this: fluentYTDlp) => fluentYTDlp;
    consoleTitle: (this: fluentYTDlp) => fluentYTDlp;
    progressTemplate: (this: fluentYTDlp, template: string) => fluentYTDlp;
    verbose: (this: fluentYTDlp) => fluentYTDlp;
    dumpPages: (this: fluentYTDlp) => fluentYTDlp;
    writePages: (this: fluentYTDlp) => fluentYTDlp;
    printTraffic: (this: fluentYTDlp) => fluentYTDlp;
    encoding: (this: fluentYTDlp, encoding: string) => fluentYTDlp;
    legacyServerConnect: (this: fluentYTDlp) => fluentYTDlp;
    noCheckCertificates: (this: fluentYTDlp) => fluentYTDlp;
    preferInsecure: (this: fluentYTDlp) => fluentYTDlp;
    addHeaders: (this: fluentYTDlp, headers: string) => fluentYTDlp;
    bidiWorkaround: (this: fluentYTDlp) => fluentYTDlp;
    sleepRequests: (this: fluentYTDlp, seconds: string | number) => fluentYTDlp;
    sleepInterval: (this: fluentYTDlp, interval: string | number) => fluentYTDlp;
    minSleepInterval: (this: fluentYTDlp, interval: string | number) => fluentYTDlp;
    maxSleepInterval: (this: fluentYTDlp, interval: string | number) => fluentYTDlp;
    sleepSubtitles: (this: fluentYTDlp, interval: string | number) => fluentYTDlp;
    format: (this: fluentYTDlp, format: string) => fluentYTDlp;
    formatSort: (this: fluentYTDlp, sort: string) => fluentYTDlp;
    formatSortForce: (this: fluentYTDlp) => fluentYTDlp;
    SForce: (this: fluentYTDlp) => fluentYTDlp;
    noFormatSortForce: (this: fluentYTDlp) => fluentYTDlp;
    videoMultiStreams: (this: fluentYTDlp) => fluentYTDlp;
    noVideoMultiStreams: (this: fluentYTDlp) => fluentYTDlp;
    audioMultiStreams: (this: fluentYTDlp) => fluentYTDlp;
    noAudioMultiStreams: (this: fluentYTDlp) => fluentYTDlp;
    preferFreeFormats: (this: fluentYTDlp) => fluentYTDlp;
    noPreferFreeFormats: (this: fluentYTDlp) => fluentYTDlp;
    checkFormats: (this: fluentYTDlp) => fluentYTDlp;
    checkAllFormats: (this: fluentYTDlp) => fluentYTDlp;
    noCheckFormats: (this: fluentYTDlp) => fluentYTDlp;
    listFormats: (this: fluentYTDlp) => fluentYTDlp;
    mergeOutputFormat: (this: fluentYTDlp) => fluentYTDlp;
    writeSubs: (this: fluentYTDlp) => fluentYTDlp;
    noWriteSubs: (this: fluentYTDlp) => fluentYTDlp;
    writeAutoSubs: (this: fluentYTDlp) => fluentYTDlp;
    writeAutomaticSubs: (this: fluentYTDlp) => fluentYTDlp;
    noWriteAutoSubs: (this: fluentYTDlp) => fluentYTDlp;
    noWriteAutomaticSubs: (this: fluentYTDlp) => fluentYTDlp;
    listSubs: (this: fluentYTDlp) => fluentYTDlp;
    subFormat: (this: fluentYTDlp, format: string) => fluentYTDlp;
    subLangs: (this: fluentYTDlp, regex: string) => fluentYTDlp;
    username: (this: fluentYTDlp, username: string) => fluentYTDlp;
    password: (this: fluentYTDlp, password: string) => fluentYTDlp;
    twofactor: (this: fluentYTDlp, code: string) => fluentYTDlp;
    netrc: (this: fluentYTDlp) => fluentYTDlp;
    netrcLocation: (this: fluentYTDlp, path: string) => fluentYTDlp;
    videoPassword: (this: fluentYTDlp, password: string) => fluentYTDlp;
    apMso: (this: fluentYTDlp, mso: string) => fluentYTDlp;
    apUsername: (this: fluentYTDlp, username: string) => fluentYTDlp;
    apPassword: (this: fluentYTDlp, password: string) => fluentYTDlp;
    apListMso: (this: fluentYTDlp) => fluentYTDlp;
    clientCertificate: (this: fluentYTDlp, path: string) => fluentYTDlp;
    clientCertificateKey: (this: fluentYTDlp, path: string) => fluentYTDlp;
    clientCertificatePassword: (this: fluentYTDlp, password: string) => fluentYTDlp;
    extractAudio: (this: fluentYTDlp) => fluentYTDlp;
    audioFormat: (this: fluentYTDlp, format: string) => fluentYTDlp;
    audioQuality: (this: fluentYTDlp, quality: string) => fluentYTDlp;
    remuxVideo: (this: fluentYTDlp, format: string) => fluentYTDlp;
    recodeVideo: (this: fluentYTDlp, format: string) => fluentYTDlp;
    postProcessorArgs: (this: fluentYTDlp, args: string) => fluentYTDlp;
    ppa: (this: fluentYTDlp, args: string) => fluentYTDlp;
    keepVideo: (this: fluentYTDlp) => fluentYTDlp;
    noKeepVideo: (this: fluentYTDlp) => fluentYTDlp;
    postOverwrites: (this: fluentYTDlp) => fluentYTDlp;
    noPostOverwrites: (this: fluentYTDlp) => fluentYTDlp;
    embedSubs: (this: fluentYTDlp) => fluentYTDlp;
    noEmbedSubs: (this: fluentYTDlp) => fluentYTDlp;
    embedThumbnail: (this: fluentYTDlp) => fluentYTDlp;
    noEmbedThumbnail: (this: fluentYTDlp) => fluentYTDlp;
    embedMetadata: (this: fluentYTDlp) => fluentYTDlp;
    addMetadata: (this: fluentYTDlp) => fluentYTDlp;
    noEmbedMetadata: (this: fluentYTDlp) => fluentYTDlp;
    noAddMetadata: (this: fluentYTDlp) => fluentYTDlp;
    embedChapters: (this: fluentYTDlp) => fluentYTDlp;
    addChapters: (this: fluentYTDlp) => fluentYTDlp;
    noEmbedChapters: (this: fluentYTDlp) => fluentYTDlp;
    noAddChapters: (this: fluentYTDlp) => fluentYTDlp;
    embedInfoJson: (this: fluentYTDlp) => fluentYTDlp;
    noEmbedInfoJson: (this: fluentYTDlp) => fluentYTDlp;
    parseMetadata: (this: fluentYTDlp, fromTo: string) => fluentYTDlp;
    replaceInMetadata: (this: fluentYTDlp, fields: string) => fluentYTDlp;
    xattrs: (this: fluentYTDlp) => fluentYTDlp;
    concatPlaylist: (this: fluentYTDlp, policy: string) => fluentYTDlp;
    fixup: (this: fluentYTDlp, policy: string) => fluentYTDlp;
    ffmpegLocation: (this: fluentYTDlp, path: string) => fluentYTDlp;
    exec: (this: fluentYTDlp, cmd: string) => fluentYTDlp;
    noExec: (this: fluentYTDlp) => fluentYTDlp;
    convertSubs: (this: fluentYTDlp, format: string) => fluentYTDlp;
    convertSubtitles: (this: fluentYTDlp, format: string) => fluentYTDlp;
    convertThumbnails: (this: fluentYTDlp, format: string) => fluentYTDlp;
    splitChapters: (this: fluentYTDlp) => fluentYTDlp;
    noSplitChapters: (this: fluentYTDlp) => fluentYTDlp;
    removeChapters: (this: fluentYTDlp, regex: string) => fluentYTDlp;
    noRemoveChapters: (this: fluentYTDlp) => fluentYTDlp;
    forceKeyframesAtCuts: (this: fluentYTDlp) => fluentYTDlp;
    noForceKeyframesAtCuts: (this: fluentYTDlp) => fluentYTDlp;
    usePostProcessor: (this: fluentYTDlp, postProcessor: string) => fluentYTDlp;
    sponsorBlockMark: (this: fluentYTDlp, cats: string) => fluentYTDlp;
    sponsorBlockRemove: (this: fluentYTDlp, cats: string) => fluentYTDlp;
    sponsorBlockChapterTitle: (this: fluentYTDlp, template: string) => fluentYTDlp;
    noSponsorBlock: (this: fluentYTDlp) => fluentYTDlp;
    sponsorBlockApi: (this: fluentYTDlp) => fluentYTDlp;
    extractorRetries: (this: fluentYTDlp, retries: string | number) => fluentYTDlp;
    allowDynamicMpd: (this: fluentYTDlp) => fluentYTDlp;
    noIgnoreDynamicMpd: (this: fluentYTDlp) => fluentYTDlp;
    ignoreDynamicMpd: (this: fluentYTDlp) => fluentYTDlp;
    noAllowDynamicMpd: (this: fluentYTDlp) => fluentYTDlp;
    hlsSplitDiscontinuity: (this: fluentYTDlp) => fluentYTDlp;
    noHlsSplitDiscontinuity: (this: fluentYTDlp) => fluentYTDlp;
    extractorArgs: (this: fluentYTDlp, args: string) => fluentYTDlp;
}
export = fluentYTDlp;
//# sourceMappingURL=main.d.ts.map